name: Check GitHub tokens
# This is a workflow to check your GitHub Personal Access Tokens (as kept in
# GitHub secrets), and to warn you if a token is nearing its expiration
# date.
# 
# Usage: 
# 1. Add this to your repository's .github/workflows directory.
# 2. Change the TOKEN_SECRET matrix to represent the names of the GitHub
#    tokens in your repository's secrets.
# 3. If desired, adjust the WARN_IF_WITHIN_DAYS variable to meet your
#    desired warning period.
# 4. If desired, adjust the cron schedule and workflow dispatch triggers.
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

jobs:
  check-token:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        TOKEN_SECRET:
          - "GOOD_TOKEN"
          - "BAD_TOKEN"
    steps:
      - name: "Check token"
        env:
          WARN_IF_WITHIN_DAYS: 7
          GITHUB_TOKEN: ${{ secrets[matrix.TOKEN_SECRET] }}  # will that work?
        shell: bash -l {0}
        run: |
          # output conveniences
          function color_line() {
              text=$1
              color=$2
              echo -e "\033[0;${color}m${text}\033[0m"
          }
          function pass() {
              color_line "$1" 32
              exit 0
          }
          function fail() {
              color_line "$1" 31
              exit 1
          }

          # shorten the curl line by defining a few variables
          QUERY="{\"query\": \"query { viewer { login } }\"}"
          AUTH="Authorization: bearer $GITHUB_TOKEN"
          GH_API="https://api.github.com/graphql"

          # check if we can even authenticate
          AUTHED=$(curl -H "$AUTH" -X POST -d "$QUERY" $GH_API 2> /dev/null | grep "Bad credentials")
          if [ "$AUTHED" != "" ]; then
              fail "Bad credentials. Token expired or not entered correctly."
          fi

          EXP_DATE=$(
            curl -v -H "$AUTH" -X POST -d "$QUERY" $GH_API 2>&1 > /dev/null | \
            grep "github-authentication-token-expiration" | \
            sed 's/.*expiration: //' |
            cut -d " " -f 1,2  # cut off time zone, so not exactly right, but close enough
          )

          if [ "$EXP_DATE" = "" ]; then
              # I hit this with my classic token that never expires; any other cases
              # where this would happen? (authenticated but no expiration date?)
              pass "Could not get expiration for this token (doesn't expire?)"
          fi

          EXP_EPOCH=$(date -jf "%Y-%m-%d %H:%M:%S" "$EXP_DATE" "+%s")  # macOS
          #EXP_EPOCH=$(date -d $EXP_DATE "+%s")  # linux (gnu date)
          NOW=$(date "+%s")

          EXP_TXT=$(echo $EXP_DATE | cut -d " " -f 1)
          WARN_SECONDS=$(($WARN_IF_WITHIN_DAYS * 60 * 60 * 24 ))

          if [ $(($EXP_EPOCH - $NOW)) -lt $WARN_SECONDS ]; then
              fail "Your token will expire on ${EXP_TXT}. Change it soon!"
          else
              pass "Your token will expire on ${EXP_TXT}."
          fi
